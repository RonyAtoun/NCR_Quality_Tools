package changeSetMap;

import com.microsoft.tfs.core.clients.workitem.WorkItem;
import com.microsoft.tfs.core.clients.workitem.WorkItemClient;
import com.microsoft.tfs.core.clients.workitem.link.ExternalLink;
import com.microsoft.tfs.core.clients.workitem.link.Link;
import com.microsoft.tfs.core.clients.workitem.link.RelatedLink;

public class ChangeSetClient {
	private WorkItemClient workItemClient;
	static final int MAX_RECURSION_DEPTH = 3;
    int recursionDepth;
    int workItemID;
    ExternalLink externalLink;
 

    public void setRecursion() {
    	recursionDepth = 0;
    }
    public void setWorkItemClient(WorkItemClient wiClient) {
    	workItemClient = wiClient;
    }
    public void setWorkItemID(int wid) {
    	workItemID = wid;
    }
    public ExternalLink getExternalLink() {
    	return externalLink;
    }
 
    
    public boolean hasChangeset (WorkItem workitem) {  //Recursive method with limit on recursion depth
         boolean retVal = false;
         String typeName = new String();
         
         typeName = workitem.getType().getName();        	     
         if (typeName.equalsIgnoreCase("Test case")) return false;
 
         if (workitem.getID() == workItemID) {
        	 if (recursionDepth > 0) {
        		 return false;
        	 }
         }
         if (recursionDepth > MAX_RECURSION_DEPTH) {
         	   recursionDepth--;
         	   return false;
          }
          else recursionDepth++;
        
		 for (Link link : workitem.getLinks())
	        {
			 
	            String linkType = link.getLinkType().getName();
	            if (link instanceof ExternalLink && linkType.equalsIgnoreCase("Fixed in Changeset")) {
	            	externalLink = (ExternalLink) link;
	            	retVal = true;
	            	break;
	            }
         	
	            else if (link instanceof RelatedLink && recursionDepth <= MAX_RECURSION_DEPTH-1) {
	            	RelatedLink rLink = (RelatedLink) link;
	            	int linkID = rLink.getTargetWorkItemID();
	            	WorkItem linkedItem = workItemClient.getWorkItemByID(linkID);
	            	if (linkedItem != null && hasChangeset (linkedItem) == true) {
	            		retVal = true;
	            		break;
	            	}	            	
	            }
	        }
		 recursionDepth--;
		 return retVal;
	 }
}
